<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on SJC</title>
    <link>https://blog.debug.online/posts/</link>
    <description>Recent content in Posts on SJC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Sat, 18 May 2019 01:17:04 +0800</lastBuildDate>
    
	<atom:link href="https://blog.debug.online/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>gin web框架快速入门</title>
      <link>https://blog.debug.online/posts/gin-start/</link>
      <pubDate>Sat, 18 May 2019 01:17:04 +0800</pubDate>
      
      <guid>https://blog.debug.online/posts/gin-start/</guid>
      <description>web框架Gin What is Gin Gin是一款开源的轻量级web服务框架，基于http-router搭建而成
它提供了类型martini的API但在性能上具有巨大优势
Why Gin Golang的web服务框架有很多，诸如beego,iris,gin等等，选用Gin作为例子并不是否认其它框架，一是用多了比较习惯，二是可以快速搭建一个API架子
Install 要安装Gin,只需要国际惯例的go get
 go get github.com/gin-gonic/gin
 Start 创建一个新项目，请注意，如果需要使用包管理，则默认情况下你不能把项目目录建在GOPATH中
在main.go中加入以下代码
package main import &amp;#34;github.com/gin-gonic/gin&amp;#34; func main(){ router := gin.Default() router.GET(&amp;#34;/&amp;#34;, func(c *gin.Context) { c.String(200,&amp;#34;hello world!&amp;#34;) }) router.Run(&amp;#34;:8888&amp;#34;) } 然后编译运行
(Linux)
 go build -o app ./app
 (Windows)
 go build -o app.exe 运行 app.exe
 出现下列提示则代表服务已经启动，如果提示8888端口被占用，那换一个即可
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.</description>
    </item>
    
    <item>
      <title>golang中的reflect 反射包(上)</title>
      <link>https://blog.debug.online/posts/reflect/</link>
      <pubDate>Mon, 22 Apr 2019 21:05:40 +0800</pubDate>
      
      <guid>https://blog.debug.online/posts/reflect/</guid>
      <description>reflect 反射 什么是反射 对于反射，最简单的理解就是
我给你一个变量a:=1，你告诉我这个a变量是个int，值为1
尤其是对于interface{}接口类型，由于丢失了其真正的显式类型，需要通过反射来获取类型
快速上手 通过此代码，你可以快速的使用到类型判别的功能 func getType(input interface{})(realType string){ t := reflect.TypeOf(input) return t.String() } func main(){ var a interface{} a = 1 realType := getType(a) fmt.Println(realType) //int } 如上所示，我们进行了很简单的类型判别，申明了一个空接口类型的变量a，并将一个整数1赋值给他，此时编译器并不能得知他的真正类型
通过编写方法getType()，调用了反射包的TypeOf方法，我们可以获得一个reflect.Type类型的对象，此对象即为承载了目标变量类型的结构体
通过Type.String()方法，将此结构体的类型转换为字符串&amp;quot;int&amp;quot;赋值给一个字符串变量，于是此变量就可以被用于各种后续操作
Type，Kind和Value golang的反射包总共有三大元素:Type，Kind和Value
我们可以将一个变量拆分为两个域:类型(Type)和值(Value)
Type是变量的类型域(内存中定义此变量类型的区域)，如string,int64等等
而Value则是实际承载的数据域(即内存上记录这块数据的区域)，如&amp;quot;hello&amp;quot;，1,甚至[1,2,3,5]等
Type 和 Kind 顾名思义，Type和Kind都是&amp;rdquo;类型&amp;rdquo;的意思，那这两者有什么区别呢
官方文档定义如下
Kind:
//A Kind represents the specific kind of type that a Type represents. The zero Kind is not a valid kind. type Kind uint const ( Invalid Kind = iota Bool Int Int8 .</description>
    </item>
    
    <item>
      <title>Golang中的interface{}</title>
      <link>https://blog.debug.online/posts/interface/</link>
      <pubDate>Mon, 22 Apr 2019 09:45:50 +0800</pubDate>
      
      <guid>https://blog.debug.online/posts/interface/</guid>
      <description>万能的interface{} 写过golang的童鞋们应该都知道这个叫做interface{}的东西，他的功能可以说是有点强大的，比如它可以被任意类型(包括其他interface)赋值
//string str := &amp;#34;something to say&amp;#34; var i interface{} i = str fmt.Println(str) //something to say fmt.Println(i) //something to say  //num num := 10085 i = num fmt.Println(num) //10086 fmt.Println(i) //10086 是不是很像PHP,Pyhton中的弱类型？在某种意义上来说,如果你将任何东西赋值给了interface,并且不需要做任何层面的数据处理(不需要里边的对某一项数据做取值、赋值操作)的话，确实可以当做golang中的弱类型来使用，直接用于Print和输出JSON等操作
当然，试图从interface中取值并不是一个很麻烦的操作，这将在后面将reflect包时提及
interface{}的实质 所以，强类型中的Golang究竟是如何实现&amp;rdquo;弱类型&amp;rdquo;的呢
首先我们去官方文档看下interface{}的定义
Interface types An interface type specifies a method set called its interface. A variable of interface type can store a value of any type with a method set that is any superset of the interface.</description>
    </item>
    
  </channel>
</rss>