<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SJC</title>
    <link>https://billsjc.github.io/blog/</link>
    <description>Recent content on SJC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Sun, 30 Jun 2019 13:55:40 +0800</lastBuildDate>
    
	<atom:link href="https://billsjc.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用Go实现AppleID登录</title>
      <link>https://billsjc.github.io/blog/posts/sign-in-with-apple/</link>
      <pubDate>Sun, 30 Jun 2019 13:55:40 +0800</pubDate>
      
      <guid>https://billsjc.github.io/blog/posts/sign-in-with-apple/</guid>
      <description>使用Go实现AppleID的Oauth登录 苹果在前日发布iOS13的时候顺路发布了他的第三方登录Sign in with Apple，并且还要求所有使用第三方登陆的APP必须介入此功能并将其置顶，emmmm对于这种行为本人不做任何评价，既然人家要求，那就实现呗
官方文档 Sign in with Apple的官方文档可以说是少之又少，文档地址
目前Sign In with Apple REST API共有两个接口
 Fetch Apple&amp;rsquo;s public key for verifying token signature - 获取苹果的公钥进行验证 Generate and validate tokens - 获得和验证Token  显然,第一个获取公钥的接口是拿来检验Response的，那就只剩下一个接口了，我们来看看他都说了些啥(下为官方文档原文)
Validate the authorization grant code with Apple to obtain tokens or validate an existing refresh token. 大致翻译：校验Apple的authorization code并获得AccessToken和RefreshToken 那看起来应该是一个挺正常的Oauth，通过Code换Token，那我们来看看请求结构
URL:
POST https://appleid.apple.com/auth/token
Params(翻译后):
这里的参数有很多坑，将会在下面逐个讲解
 client_id client_secret code grant_type redirect_uri  client_id 首先遇到的第一个坑就是client_id,这个client_id究竟指啥呢，原文是：
The application identifier for your app.</description>
    </item>
    
    <item>
      <title>gin 输入输出处理</title>
      <link>https://billsjc.github.io/blog/posts/gin-io/</link>
      <pubDate>Tue, 28 May 2019 10:31:17 +0800</pubDate>
      
      <guid>https://billsjc.github.io/blog/posts/gin-io/</guid>
      <description>Gin的输入输出 在上一篇文章&amp;ldquo;gin web框架快速入门中我对Gin框架进行了大致的介绍并简单的实现了一个基于Gin的HTTP服务器，这回来主要介绍一下Gin的输入输出处理
输入处理 首先，我们需要整理一下数据可以从哪些地方输入
 Query 即URL参数，URL中?a=xxx&amp;amp;b=xxxx诸如此类的参数列表，由于是在URL字符串中，所以只能是字符串 Param URL路径信息，Gin支持路径通配符，如设置GET /user/info/:username后，Gin会检测:1通配符对应的路径项，若访问了GET /user/info/foo,则:username就对应了foo，具体用法将会在下方提及 Header 请求头，即HTTP请求头部的键值对 Payload 请求体，通常用于传输大量数据，POST表单数据也在此传输 其它不常用输入，如SSL连接状态，TCP连接状态等等，在此不过多赘述  输入场景举例-用户登录 我们通过一个用户登录的场景解释一下基本的表单数据输入
首先前端页面有个这样的表单
   名称 Name 说明     用户名 username 用户名(string)   密码 password 密码(string)    登录url为 POST /login?showUsername={true/false}
用户名密码通过表单传输，showUsername参数用于决定是否出输出用户名
首先贴完整代码
package main import &amp;#34;github.com/gin-gonic/gin&amp;#34; func main(){ g := gin.Default() //注册路由 	g.POST(&amp;#34;/login&amp;#34;,loginHandler) } //注册闭包 func loginHandler(c *gin.Context){ //获取URL输入 	showUsername := c.Query(&amp;#34;showUsername&amp;#34;) //获取POST表单输入 	username := c.</description>
    </item>
    
    <item>
      <title>gin web框架快速入门</title>
      <link>https://billsjc.github.io/blog/posts/gin-start/</link>
      <pubDate>Sat, 18 May 2019 01:17:04 +0800</pubDate>
      
      <guid>https://billsjc.github.io/blog/posts/gin-start/</guid>
      <description>web框架Gin What is Gin Gin是一款开源的轻量级web服务框架，基于http-router搭建而成
它提供了类似martini的API实现但同时在性能上具有巨大优势
Why Gin Golang的web服务框架有很多，诸如beego,iris,gin等等，选用Gin作为例子并不是否认其它框架，一是用多了比较习惯，二是可以快速搭建一个API架子
Install 要安装Gin,只需要国际惯例的go get
 go get github.com/gin-gonic/gin
 Start 创建一个新项目，请注意，如果需要使用包管理，则默认情况下你不能把项目目录建在GOPATH中
在main.go中加入以下代码
package main import &amp;#34;github.com/gin-gonic/gin&amp;#34; func main(){ router := gin.Default() router.GET(&amp;#34;/&amp;#34;, func(c *gin.Context) { c.String(200,&amp;#34;hello world!&amp;#34;) }) router.Run(&amp;#34;:8888&amp;#34;) } 然后编译运行
(Linux)
 go build -o app ./app
 (Windows)
 go build -o app.exe 运行 app.exe
 出现下列提示则代表服务已经启动，如果提示8888端口被占用，那换一个即可
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.</description>
    </item>
    
    <item>
      <title>golang中的reflect 反射包(上)</title>
      <link>https://billsjc.github.io/blog/posts/reflect/</link>
      <pubDate>Mon, 22 Apr 2019 21:05:40 +0800</pubDate>
      
      <guid>https://billsjc.github.io/blog/posts/reflect/</guid>
      <description>reflect 反射 什么是反射 对于反射，最简单的理解就是
我给你一个变量a:=1，你告诉我这个a变量是个int，值为1
尤其是对于interface{}接口类型，由于丢失了其真正的显式类型，需要通过反射来获取类型
快速上手 通过此代码，你可以快速的使用到类型判别的功能 func getType(input interface{})(realType string){ t := reflect.TypeOf(input) return t.String() } func main(){ var a interface{} a = 1 realType := getType(a) fmt.Println(realType) //int } 如上所示，我们进行了很简单的类型判别，申明了一个空接口类型的变量a，并将一个整数1赋值给他，此时编译器并不能得知他的真正类型
通过编写方法getType()，调用了反射包的TypeOf方法，我们可以获得一个reflect.Type类型的对象，此对象即为承载了目标变量类型的结构体
通过Type.String()方法，将此结构体的类型转换为字符串&amp;quot;int&amp;quot;赋值给一个字符串变量，于是此变量就可以被用于各种后续操作
Type，Kind和Value golang的反射包总共有三大元素:Type，Kind和Value
我们可以将一个变量拆分为两个域:类型(Type)和值(Value)
Type是变量的类型域(内存中定义此变量类型的区域)，如string,int64等等
而Value则是实际承载的数据域(即内存上记录这块数据的区域)，如&amp;quot;hello&amp;quot;，1,甚至[1,2,3,5]等
Type 和 Kind 顾名思义，Type和Kind都是&amp;rdquo;类型&amp;rdquo;的意思，那这两者有什么区别呢
官方文档定义如下
Kind:
//A Kind represents the specific kind of type that a Type represents. The zero Kind is not a valid kind. type Kind uint const ( Invalid Kind = iota Bool Int Int8 .</description>
    </item>
    
    <item>
      <title>Golang中的interface{}</title>
      <link>https://billsjc.github.io/blog/posts/interface/</link>
      <pubDate>Mon, 22 Apr 2019 09:45:50 +0800</pubDate>
      
      <guid>https://billsjc.github.io/blog/posts/interface/</guid>
      <description>万能的interface{} 写过golang的童鞋们应该都知道这个叫做interface{}的东西，他的功能可以说是有点强大的，比如它可以被任意类型(包括其他interface)赋值
//string str := &amp;#34;something to say&amp;#34; var i interface{} i = str fmt.Println(str) //something to say fmt.Println(i) //something to say  //num num := 10085 i = num fmt.Println(num) //10086 fmt.Println(i) //10086 是不是很像PHP,Pyhton中的弱类型？在某种意义上来说,如果你将任何东西赋值给了interface,并且不需要做任何层面的数据处理(不需要里边的对某一项数据做取值、赋值操作)的话，确实可以当做golang中的弱类型来使用，直接用于Print和输出JSON等操作
当然，试图从interface中取值并不是一个很麻烦的操作，这将在后面将reflect包时提及
interface{}的实质 所以，强类型中的Golang究竟是如何实现&amp;rdquo;弱类型&amp;rdquo;的呢
首先我们去官方文档看下interface{}的定义
Interface types An interface type specifies a method set called its interface. A variable of interface type can store a value of any type with a method set that is any superset of the interface.</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>https://billsjc.github.io/blog/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://billsjc.github.io/blog/about/</guid>
      <description>Hugo is a static site engine written in Go.
It makes use of a variety of open source projects including:
 Cobra Viper J Walter Weatherman Cast  Learn more and contribute on GitHub.
Setup Some fun facts about Hugo:
 Built in Go Loosely inspired by Jekyll Primarily developed by spf13 on the train while commuting to and from Manhattan. Coded in Vim using spf13-vim  Have questions or suggestions?</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://billsjc.github.io/blog/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://billsjc.github.io/blog/contact/</guid>
      <description> contact me  Mail:sjc@debug.online or sjc@hduhelp.com QQ:707425690 Telegram:BillSJC  </description>
    </item>
    
    <item>
      <title>Contato</title>
      <link>https://billsjc.github.io/blog/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://billsjc.github.io/blog/contact/</guid>
      <description> contact me  Mail:sjc@debug.online QQ:707425690 Telegram:BillSJC  </description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://billsjc.github.io/blog/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://billsjc.github.io/blog/projects/</guid>
      <description>Nothing to see here&amp;hellip; Move along!</description>
    </item>
    
    <item>
      <title>Projetos</title>
      <link>https://billsjc.github.io/blog/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://billsjc.github.io/blog/projects/</guid>
      <description>Em construção&amp;hellip; Aguarde!</description>
    </item>
    
    <item>
      <title>Who am i</title>
      <link>https://billsjc.github.io/blog/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://billsjc.github.io/blog/about/</guid>
      <description> golang developer  gin&amp;amp;beego&amp;amp;gorm&amp;amp;xorm  </description>
    </item>
    
  </channel>
</rss>